Internal Commands:

DISPLAYING AND MANIPULATING DATA
 cat [-b] {file}		copy file(s) to StdOut
 crypt [key]			encrypt or decrypt StdIn to StdOut
 echo {string}			write strings to StdOut
 egrep [-cfl] pattern {file}	find pattern, allows regular expressions
 fgrep [-cfl] pattern {file}	find pattern, fixed string only
 grep [-cfsl] pattern {file}	find pattern, allows extended wildcards
 hd {file}			Hex dump
 more {file}			show file in pages
 pg {file}			same as more
 raw [-bnc] {file}		put file(s) on raw console
 split [-bfv] [-Num] {file}	break file into pieces of Num lines each
 tee file			copy StdIn to StdOut and to file
 tr fltrfile			filter StdIn to StdOut according to fltrfile
 wc [-lwcn] {file}		count lines, words, and characters
 what [-s] {file}		identify files by @(#)

MAINTAINING FILES AND DIRECTORIES 
 chmod (+|-)[cdhrsvf] file	change file attributes
 cp [-acCvifq] src {src} dest	copy files
 ln [-s] src {src} dest 	link files (MiNT only)
 ls [-adlfkcCvixtnbr] {filespec} list files
 mkdir [-r] dir {dir}		create directories
 mv [-vif] src {src} dest	move or rename files
 rm [-friqv] file {file}	remove files
 rmdir dir {dir}		remove directories
 touch file {file}		update date-time-stamp or create a file

SHELL PROGRAMMING
 . file 			execute a file as a shell script
 [ expr ]			same as test
 alert icn def boxt butt [var]	(*) display an AES alert box
 exec [-lbxg] file {Parameter}	execute a file as a binary program
 exit				finish a script
 Exit				finish the shell
 false				returns 0
 fsel [filespec [name [var [lbl]]]]   (*) select a file with the fileselect box
 if, then, else, fi		see below
 indir String			send String once more through the evaluator
 read [[-] variable]		read a variable from StdIn
 sleep [-s] Time		wait for a while
 test [expr]			evaluate a logical expression
 true				returns 1
 while, do, break, done 	see below
 xargs [Command {Parameter}]	perform with lines from StdIn, replace {}

SHELL AND SYSTEM MANAGEMENT AND CONFIGURATION
 alias name string		set up a shell function
 clipb [path]			(*) configure the AES clipboard ($CLIPDIR)
 cursor [(+|-)bv] [rate]	configure VT52 cursor
 date [+DateFmt]		show time and date
 df [-dnmbf] {drive}		disk space info
 drive drive{drive} [name]	get/set drive names
 du [-brft] {directory} 	disk usage info & directory tree
 exit				finish the shell
 export [[-] {Variable}]	mark or unmark for envir. (wildcards allowed)
 goff				exit from AES application
 gon [-q]			init as AES application or query
 hash [-r] [Cmd [Path]] 	read&set the hash table (wildcards allowed)
 keyb [-] | ([(+|-)abc] [-irk]) konfigure the keyboard
 keydef [+nsca] key [text|-]	redefine the keyboard
 mouse [+|-] [form] [Var [Var [Var]]]	(*) configure or query the mouse
 overscan [+|-] 		switch OverScan on and off
 readonly [[-] {variable]}	make variables readonly (wildcards allowed)
 rdti [-dclxv] [filename]	configure shell from desktop.inf
 rsconf [-spbw] [(+|-)xr]	configure the serial interface (RS232)
 scr [-bwghl]			set backgr.col and (*) # of lines (hires only)
 shutdown [-rRtfv]		shut down or reset the system
 sync				flush TCache write buffer
 trap [-|[+]Command {Parameter}] set a command to execute on shell exit
 unalias name {name}		same as unset
 unset name {name}		delete shell functions

SHELL AND SYSTEM MONITORING
 adr				show some system adresses
 basep [-ap] [adress]		find or analyse a basepage
 cmds [-Ca] {pattern}		list internal commands (wildcards allowed)
 cookie [-xdn0sc] {cookie}	read out the cookie jar (wildcards allowed)
 env				show the shell's environment
 errcode {Number|errno} 	explain an error number
 fcts				list Shell functions
 history [-l]			load or save the history list
 id				print user & group id (MiNT only)
 mem [-b]			show free or total RAM
 memex [-acwls] Adress [Number] examine memory
 pmd				produce a post mortem dump
 set [-|(+|-)blxaschuS] 	show/set Shell flags
 time Command {Parameter}	command run time
 tty				print name of terminal
 type [-fs] command {command}	show calling path of command
 vars [-aexs]			list Shell variables
 ver [-oclgtdmMa]		show shell & OS version numbers

UTILITIES
 backup [-nNrq] [path]		save files to disk
 dial [-q|-f file|{No|Id|-d}]	dial a phone number on the modem
 find path {condition}		recursively find files
 getscr [-[header] filename]	get screen bit image
 kill [-sig] pid {pid}		send a signal to processes (MiNT only)
 man [command]			online help
 putscr [-(f|s filename)]	show/save a screen bit image
 rpn [Fmt] rpn-expr		RPN calculator
 seek path filespec		list matching files
 sort [-lnrs]			sort StdIn to StdOut
 te [-dk] [Dev {file|:string}]	terminal emulator
 ts [-hlpbmdtref]		terminal server
 upn [Fmt] rpn-expr		same as rpn
 virus [-xvsi] {drive}		find & extinguish bootsector viruses

MISCELLANIOUS
 basename file [extender]	find filename (a:\okami\sh.ttp -> sh.ttp)
 bombs n			terminate with n bombs (n>=2)
 cd [path]			change work directory
 cls				clear the screen
 dark				darken the screen (same as ^A)
 dirname file			find path (a:\okami\sh.ttp -> a:\okami\)
 drvname file			find drive (a:\okami\sh.ttp -> a:)
 extname file			find extender (okami\sh.ttp -> .ttp)
 fullname file			find absolute filename
 hardcopy			print contents of screen
 help				same as pg $HOME/help
 logo [x [y]]			draw the Okami logo
 pwd [-a|{Drive}]		print work directory
 system com {args}		execute command via _shell_p


 (*) command can only be used after gon has been called.
 
 drive: 	e.g.	d:
 path:		e.g.	d:\okami
 file:		e.g.	d:\okami\sh.ttp
 filespec:	e.g.	d:\okami\*.sh		or file
 source,dest:	file
 fltrfile:	file
 pattern:	any string
 Number:	eg. 123 (dec), 0xabc (hex), 0123 (oct), %110 (bin), !A (char)
 Adress:	Number
 Time:		Number
 rate:		0:still, 30:normal, <30:faster, >30:slower
 expr:		a logical expression, see "test" in commands.doc
 rpn-expr:	an RPN expression
 Fmt:		a printf format string
 DateFmt:	special printf-like format, see "date" in commands.doc
 form:		0 arrow, 1 hourglass, 2 bee, 3 pointing hand, 4 flat hand,
		5 thin crosshair, 6 thick crosshair, 7 outlined crosshair


 Commands with optional file (eg. hd [file]) take StdIn if no file is given.


 Extended Wildcards:
 *	matches anything
 ?	matches one character
 [xyz]	matches x, y, or z
 [x-z]	matches x, ..., z
 [~xy]	matches any character except x and y

 Conditional execution:
 if command		Executes commands1 if command returns a non-zero
 then			exit value and commands2 if command returns a
   commands1		zero exit value. "else command2" may be ommitted.
 else			command can be "test expr" or "[ expr ]" (see
   commands2		"test").
 fi			This works with shell scripts and in interactive
			mode.

 Looping:
 while command		Executes commands2 until command returns a zero
 do			exit value. break may be used within an if-fi-
   commands2		construct and quits the loop immediately.
   <may include:>	continue may be used within an if-fi-contruct and
   break <or>		starts a new loop immediately.
   continue		This works with shell scripts (and functions) only.
 done

 Function deklaration:
 functionname(filename) generates "functionname" from file
 (filename)		generates `basename filename` from file
 functioname()		generates "functionname" with the given
 {			commands
   commands...
 }
 functionname() 	removes the named function
 {}

 `filename' may be a shell script or executable program file.
 

 I/O redirection:
 <			redirect StdIn
 >			redirect StdOut, create
 >>			redirect StdOut, append
 n>			redirect File-Descr. n, create (n=2: StdErr)
 n>>			redirect File-Descr. n, append (n=2: StdErr)
 |			pipe
 <<[-]eofstring 	inline document
 `...`			command substitution

 Devices:
 A:			Disk Drive A:
 B:			Disk Drive B: etc.
 CON:			Console (screen and keyboard)
 PRN:			Printer (parallel port)
 AUX:			RS232 (serial Port [Modem])
 NULL:			nowhere (set $NULL to specify)

 Keyboard command entry:
 Backspace		erase last character
 Up-Arrow		display previous in history (*)
 Dn-Arrow		display next in history (*)
 Lt-Arrow		move cursor (**)
 Rt-Arrow		move cursor (**)
 Ctrl Space		restore from previous input
 Insert 		insert a space
 Ctrl Insert		toggle insert/overwrite mode
 Delete 		delete a char
 Ctrl Delete		delete to end of line
 Clr Home		erase line
 Esc			filename completion
 Shift Esc		filename-expand last word
 Help			explain current command using $HELPFILE
 Ctrl Shift Undo	deactivate keydefs (valid until ENTER)
 Control V		enter a control character (like vi)
 Control F		select a file via fileselect box (***)
 Control P		execute the shell function "screensave"
 Control A		darken screen, resume with any key
 Alternate Space	display time&date until Space is released
 Control D		abort the shell

 (*) with Ctrl: execute, with Shift: last match
 (**) normal: one char, with Ctrl: one word, with Ctrl: beg/end of line
 (***) needs gon
