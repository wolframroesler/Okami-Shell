
                        Okami Shell Version 1.5 


                           Okami Microshell 


                              Version 1.7 




                 von Wolfram Rîsler ... Public Domain 

Zum  Lieferumfang der Okami-Shell gehîrt eine Mini-Shell,  deren Aufgabe
es  ist,  die Hauptshell aufzurufen.  Die Notwendigkeit dazu ergibt sich
aus dem folgenden Dilemma: 

        Damit  von  der Shell aus GEM-Programme gestartet werden kînnen,
        muû die Shell vom Desktop aus als PRG gestartet werden. 

        Die  Shell  lÑdt  die  Datei  profile  nur  dann,   wenn ihr als
        Parameter  ein Minuszeichen Åbergeben wird (Login-Shell,  wie in
        Unix). 

        Beim Aufruf vom Desktop als PRG ist die Eingabe eines Parameters
        nicht vorgesehen 

        Also kann man keine Login-Shell aufrufen,  von der der Start von
        GEM-Programmen mîglich ist. 

Zu diesem Zweck gibt es die Microshell, die, wenn sie als PRG aufgerufen
wird  und  dann  ihrerseits  die  Okami-Shell  aufruft,  den  Start  von
GEM-Programmen ermîglicht. 

Die  Microshell  erfÅllt allerdings nicht nur diesen Zweck,  sondern sie
ist  ein  Werkzeug  zur  Kontrolldatei-gesteuerten  AusfÅhrung  mehrerer
Programme mit jeweiligen Parametern.  Dazu wird eine Datei angelegt,  in
der  die  Namen  der  aufzurufenden  Programme  und  die zu Åbergebenden
Parameter angefÅhrt sind.  Das macht die Microshell tatsÑchlich zu einer
kleineren Version einer Shell,  die zwar nicht interaktiv arbeitet, aber
trotzdem in der Lage ist, z.B. einen Compiler oder Linker aufzurufen und
das Ergebnis anschlieûend zu starten. 
Die  Microshell  ist  also  ein vollwertiger Batch-Prozessor,  der seine
eigenen  Shellscripts hat und fÅr die vielfÑltigsten Aufgaben eingesetzt
werden  kann  (natÅrlich  auch  vollkommen unabhÑngig von dem restlichen
Okami-System). 

Die Batch-  oder Kontrolldateien, die von der Microshell benutzt werden,
werden als MSH-Scripts bezeichnet. 


Die  Microshell  befindet  sich in der Datei msh.prg.  Der Quellcode der
Microshell gehîrt zum Lieferumfang und befindet sich in der Datei msh.c.



AUFRUF DER MICROSHELL

Nach  dem Start der Microshell als MSH.PRG wird als MSH-Script die Datei
msh.inf im aktuellen Directoy benutzt. 
Wenn  die Microshell als MSH.TTP oder von der Okami-Shell aus aufgerufen
wird,  ist die Eingabe einer Kommandozeile mîglich, die folgender Syntax
folgt: 

                   { Dateiname } [-c { Kommandos }] 

Die angegebenen Dateien werden als MSH-Scripts ausgefÅhrt.  Wenn nach -c
Kommandos  angegeben sind,  werden diese direkt ausgefÅhrt.  Dies kînnen
die Namen von zu startenden Programmen,  aber auch interne Kommandos der
Microshell sein. 
ACHTUNG:   Jeder  Parameter stellt dabei ein vollstÑndiges Kommando dar.
Bei dem Aufruf 

                           msh -c echo hallo 

werden zwei Kommandos,  nÑmlich "echo"  und "hallo",  Åbergeben.  Um das
Kommando "echo hallo" ausfÅhren zu lassen, muû der Aufruf so aussehen: 

                          msh -c "echo hallo" 



KOMMANDOS

Die einzelnen Zeilen eines Scripts haben folgende Bedeutung: 

1)  FÅhrende und endende Whitespace-Zeichen (Leerzeichen, Tabs, Newlines
etc.) werden ignoriert. 
2)   Leerzeilen und Zeilen,  die mit einem '#'  (Doppelkreuz)  beginnen,
gelten als Kommentarzeilen. 
3)   Alle  Zeilen,   die keine Kommentarzeilen sind,  kînnen als letztes
Zeichen  einen  Backslash  (\)  erhalten,  dann wird die darauf folgende
Zeile an diese Zeile angehÑngt. 
4)  Wenn  eine  Zeile  nur  aus  einem  Pluszeichen  besteht,  wird  der
Kommentarmodus  eingeschaltet.   Im Kommentarmodus wird der Name und die
Parameter  jedes  aufgerufenen Programmes auf dem Bildschirm ausgegeben.
(Gilt  nicht  fÅr interne Kommandos.)  Nach dem Start der Microshell ist
der Kommentarmodus eingeschaltet. 
5)   Wenn  eine Zeile nur aus einem Minuszeichen besteht,  wird der Kom-
mentarmodus abgeschaltet. 
6) Allen anderen Zeilen werden in der Form 

                          Kommando Parameter 

interpretiert.   Das Kommando ist dabei entweder der Name eines internen
Kommandos oder der Dateiname eines auszufÅhrenden Programms. 

Folgende interne Kommandos sind vorhanden: 


cd

        Ñndert  das  aktuelle Directory.  `Parameter'  darf ein Laufwerk
        enthalten, z.B. "cd c:bin". 


exit

        das augenblickliche MSH-Script wird beendet. 


echo

        gibt den String `Parameter'  auf dem Bildschirm aus.  Der String
        darf Steuersequenzen enthalten, siehe unten. 


incl

        fÅhrt  die  als Parameter angegebene Datei als MSH-  Script aus.
        Die  maximale  Schachtelungstiefe  von  incl-anweisungen ist nur
        durch   den   verfÅgbaren   Speicher   und   die   Maximalanzahl
        gleichzeitig offener Dateien begrenzt. 


ver

        gibt    die    Versionsnummer    der    Microshell    und    den
        Kompilierungszeitpunkt aus. 


exec

        startet ein Programm anstelle des msh-Prozesses. Siehe unten. 


wait

        wartet auf Tastendruck oder Datum/Uhrzeit. Siehe unten. 


Bei  allen  anderen  Kommandos  wird  die  als Kommando angegebene Datei
ausgefÅhrt,  wobei der als Parameter angegebene String als Kommandozeile
Åbergeben wird. 
Es empfiehlt sich, den vollen Dateinamen anzugeben (was aber nicht immer
unbedingt notwendig ist.) 


STEUERSEQUENZEN DES ECHO-KOMMANDOS


        \n     Newline
        \t     Tabulator
        \b     Backspace
        \\    Backslash
        \^     Zirkumflex
        \c     (am Stringende) verhindert Zeilenvorschub
        ^x      erzeugt das Zeichen mit Ascii-Code x-'A'+1. Hierbei ist
                x ein beliebiges Zeichen.
Beispiele: 
        echo Das ist eine Zeile \n und das ist die nÑchste.
        echo Das ist eine Zeile \c
        echo und das ist dieselbe.
        echo Der folgende Text: ^[p ist invers durch eine \c
        echo VT52-Steuersequenz. ^[q
        echo Man kann Backslashes: \\ und Zirkumflexe: \^ ausgeben.
        echo Ebenso kann man klingeln: ^G



DAS EXEC-KOMMANDO

Das interne Kommando exec wird folgendermaûen aufgerufen: 

                       exec Programm {Parameter} 

Das  angegebene  Programm wird mit den angegebenen Parametern gestartet,
anschlieûend  wird  die  Microshell beendet.  Wenn MiNT installiert ist,
wird  das  Programm  anstelle  des  msh-Prozesses  gestartet  (d.h.  der
msh-Prozeû  wird von dem Programm Åberlagert),  so daû die msh,  wÑhrend
das Programm lÑuft, keinen Speicherplatz belegt. 
Das   bedeutet,    daû  alles,   was  in  einem  msh-Script  nach  einem
exec-Kommando steht, nicht mehr beachtet werden kann. 


DAS WAIT-KOMMANDO

Das interne Kommando wait kann auf zwei Arten aufgerufen werden. 

                               wait key 

In dieser Form wartet msh auf einen Tastendruck.  Bei Druck auf ESC wird
das   aktuelle   Script  beendet,   bei  jeder  anderen  Taste  wird  es
fortgesetzt. 

                      wait ttmmjj HHMMSS [Text ] 

In  dieser  Form  wartet  msh  bis zu einem angegeben Datum und Uhrzeit.
Wenn anstelle von ttmmjj ein Stern (*)  steht, wartet msh nur bis zu der
angegebenen  Uhrzeit.  Wenn  der  Protokollmodus  aktiv  ist,  gibt  msh
folgende Zeile aus: 

                Waiting for Text... press ESC to abort 

Als  Text  steht  hier  der entsprechende Parameter von wait.  Wenn kein
Text angegeben ist, entfÑllt die Ausgabe von "for Text". 
Achtung:   ttmmjj  und  HHMMSS  mÅssen  immer in dieser Form geschrieben
werden,  d.h.  durch genau ein Leerzeichen getrennt;  alle Zahlen mÅssen
zweistellig  angegeben sein.  msh testet nicht auf PlausibilitÑt;  "wait
999999 999999" wartet endlos. (Ist halt eben eine "Micro"-Shell.) 

Die   Microshell   macht   keinen   Gebrauch   von   evtl.   definierten
Environment-Variablen,   gibt  diese  aber an alle gestarteten Programme
unverÑndert weiter. 


BEISPIELE

Beispiel 1: das MSH-Script zum Start der Okami-Shell 

        # Microshell Kontrolldatei fÅr Okami-Shell
        -
        echo Aufruf der Okami-Shell
        exec sh.ttp -

Es  wird  die  Okami-Shell  als  Login-Shell  (mit  dem  Parameter  "-")
aufgerufen.   Vor  dem  Aufruf  der  Shell  wird die Meldung "Aufruf der
Okami-Shell" auf den Bildschirm geschrieben. 
Wenn MiNT installiert ist, wird die Microshell von sh.ttp Åberlagert. 

Beispiel 2: ein komplizierteres Script 

        # Demo-Script fÅr die Microshell
        -
        ver
        echo Das ist ein MSH-Script


        echo Aufruf des Compilers
        d:\compiler\cc.ttp e:\source\test1.c e:\source\test2.c \
        e:source\test3.c -o e:\bin\test.tos


        # AusfÅhren eines anderen Scripts
        incl e:\bin\mshdemo.msh


        # Aufruf der Okami-Shell
        echo Plattenbelegung von Laufwerk E:
        e:\bin\sh.ttp df E: ; echo ENTER: ; read

Neben  Kommentaren  und Ausgabeanweisungen (echo)  wird der Compiler (in
der  Datei  d:\compiler\cc.ttp)   mit  einer  Åber  zwei Zeilen gehenden
Parameterliste   aufgerufen.    Danach   wird   eine   weiteres   Script
(e:\bin\mshdemo.msh)   ausgefÅhrt  und  durch Aufruf der Okami-Shell die
Belegung  von  Partition E:  ausgegeben und auf einen Tastendruck gewar-
tet. 

Beispiel  3:   Starten  eines Mailbox-Poll-Programms zu einer bestimmten
Zeit 

        wait * 023000 Poll time
        c:\bin\poll.ttp
        d:\okami\sh.ttp shutdown -rf

Dieses  MSH-Script  wartet  bis  2.30  Uhr und startet dann das Programm
c:\bin\poll.ttp  .   Danach ruft es die Okami-Shell auf,  um einen Reset
durchzufÅhren.  Das MSH-Script sollte also so installiert werden, daû es
nach  dem  Systemstart  sofort  ausgefÅhrt  wird.  WÑhrend der Wartezeit
erscheint  die  Meldung  "Waiting for Poll time...  press ESC to abort".
Wenn  der  Anwender wÑhrenddessen die ESC-Taste drÅckt,  wird das Script
abgebrochen. 


DIE MICROSHELL IM AUTOORDNER

Die Microshell kann auch anstelle des Auto-Ordners benutzt werden.  Dazu
kopiert  man  sich  alle Programme,  die beim Systemstart geladen werden
sollen,  in einen eigenen Ordner,  z.B.  in den Ordner c:startup. In den
eigentlichen  Auto-Ordner  kopiert man nur die Datei msh.prg.  Unter dem
Namen  c:\msh.inf  wird  eine  Datei  angelegt,   die  die  Namen der zu
startenden  Programme  in  der  gewÅnschten  Reihenfolge  enthÑlt.   (Im
einfachsten Fall erzeugt man diese Datei von der Okami-Shell aus mit dem
Kommando: 

                  ls -nk c:\startup\*.prg >c:\msh.inf 

Dann ist die Wirkung dieselbe wie beim Aufruf aus dem Auto-Ordner.) 
Auûerdem   kann  die  inf-Datei  Kommentare  und  echo-Zeilen  erhalten.
NatÅrlich  ist von der Microshell aus auch der Aufruf von Programmen aus
beliebigen anderen Ordnern mîglich. 
WICHTIG:    die   Datei   msh.inf   muû   bei   dieser   Verwendung   im
Wurzelverzeichnis  von  C:   liegen  und  nicht im Auto-Ordner,  da beim
Systemstart  das Wurzelverzeichnis das aktuelle Directory ist,  auch bei
der AusfÅhrung der Programme im Auto-Ordner. 
